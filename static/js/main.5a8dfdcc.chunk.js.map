{"version":3,"sources":["Graph/Graph.js","Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Graph","getConfirmedData","a","confirmedArr","i","props","data","length","x","y","dailyconfirmed","push","getRecoveredData","b","recoveredArr","dailyrecovered","getDeathsData","c","deathsArr","dailydeceased","confirmed","this","recovered","deaths","className","height","width","color","Component","Home","useState","dataReceived","setDataReceived","total","setTotal","stateData","setStateData","stateDistData","setStateDistData","stateDistArr","setStateDistArr","graphData","setGraphData","useEffect","Promise","all","axios","get","response","stateDistResponse","statewise","slice","sort","cases_time_series","Object","entries","getStates","getDeltaConfirmed","deltaconfirmed","getDeltaRecovered","deltaRecovered","getDeltaDeaths","deltaDeaths","onClickHandler","e","hiddenEl","currentTarget","nextElementSibling","firstChild","firstElementChild","classList","plusMinusIcon","value","indexOf","remove","add","replace","href","lastupdatedtime","deltarecovered","deltadeaths","count","map","state","getAffectedStateCount","id","scope","Fragment","key","onClick","active","statecode","colSpan","statenotes","g","districtData","l","delta","window","scroll","top","left","behavior","target","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a8dfdcc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\nimport { XYPlot, YAxis, LineSeries } from 'react-vis';\r\nimport './Graph.css';\r\n\r\nclass Graph extends Component {\r\n\r\n    getConfirmedData = () => {\r\n        let a = {};\r\n        let confirmedArr = [];\r\n        for (let i = 0; i < this.props.data.length; i++) {\r\n            if (i % 3 === 0) {\r\n                a = {};\r\n                a.x = i;\r\n                a.y = this.props.data[i].dailyconfirmed;\r\n                confirmedArr.push(a);\r\n            }\r\n        }\r\n        return confirmedArr;\r\n    }\r\n\r\n    getRecoveredData = () => {\r\n        let b = {};\r\n        let recoveredArr = [];\r\n        for (let i = 0; i < this.props.data.length; i++) {\r\n            if (i % 3 === 0) {\r\n                b = {};\r\n                b.x = i;\r\n                b.y = this.props.data[i].dailyrecovered;\r\n                recoveredArr.push(b);\r\n            }\r\n        }\r\n        return recoveredArr;\r\n    }\r\n\r\n    getDeathsData = () => {\r\n        let c = {};\r\n        let deathsArr = [];\r\n        for (let i = 0; i < this.props.data.length; i++) {\r\n            if (i % 3 === 0) {\r\n                c = {};\r\n                c.x = i;\r\n                c.y = this.props.data[i].dailydeceased;\r\n                deathsArr.push(c);\r\n            }\r\n        }\r\n        return deathsArr;\r\n    }\r\n\r\n    render() {\r\n\r\n        const confirmed = this.getConfirmedData();\r\n        const recovered = this.getRecoveredData();\r\n        const deaths = this.getDeathsData();\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-4 col-12 graph-style\">\r\n                    <div className=\"Graph graph-style\">\r\n                        <XYPlot height={200} width={250}>\r\n                            <YAxis />\r\n                            <LineSeries data={confirmed} color=\"red\" />\r\n                        </XYPlot>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-sm-4 col-12 graph-style\">\r\n                    <div className=\"Graph graph-style\">\r\n                        <XYPlot height={200} width={250}>\r\n                            <YAxis />\r\n                            <LineSeries data={recovered} color=\"green\" />\r\n                        </XYPlot>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-sm-4 col-12 graph-style\">\r\n                    <div className=\"Graph graph-style\">\r\n                        <XYPlot height={200} width={250}>\r\n                            <YAxis />\r\n                            <LineSeries data={deaths} color=\"#a0a3a7\" />\r\n                        </XYPlot>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Graph;","import React, { useEffect, useState } from 'react';\r\nimport './Home.css';\r\nimport axios from 'axios';\r\nimport Graph from '../Graph/Graph';\r\n\r\nconst Home = (props) => {\r\n    const [dataReceived, setDataReceived] = useState(false);\r\n    const [total, setTotal] = useState({});\r\n    const [stateData, setStateData] = useState([]);\r\n    const [stateDistData, setStateDistData] = useState([]);\r\n    const [stateDistArr, setStateDistArr] = useState([]);\r\n    const [graphData, setGraphData] = useState([]);\r\n    useEffect(() => {\r\n        const getStates = async () => {\r\n            const [response, stateDistResponse] = await Promise.all([\r\n                axios.get('https://api.covid19india.org/data.json'),\r\n                axios.get('https://api.covid19india.org/state_district_wise.json')]);\r\n            setTotal(response.data.statewise[0]);\r\n            setStateData(response.data.statewise.slice(1).sort((a, b) => {\r\n                return (b.confirmed - a.confirmed);\r\n            }));\r\n            setGraphData(response.data.cases_time_series);\r\n            setStateDistData(stateDistResponse.data);\r\n            setDataReceived(true);\r\n            setStateDistArr(Object.entries(stateDistData));\r\n        }\r\n        if (!dataReceived) {\r\n            getStates();\r\n        }\r\n    });\r\n\r\n    const calculateActiveCases = (confirmed, recovered, deaths) => {\r\n        return confirmed - recovered - deaths;\r\n    }\r\n\r\n    const getDeltaConfirmed = (deltaconfirmed) => {\r\n        if (deltaconfirmed != 0) {\r\n            return <span className=\"glyphicon glyphicon-arrow-up delta-confirmed\">{deltaconfirmed}</span>;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getDistDeltaConfirmed = (deltaconfirmed) => {\r\n        if (deltaconfirmed != 0) {\r\n            return <span className=\"glyphicon glyphicon-arrow-up delta-confirmed\">{deltaconfirmed}</span>;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getDeltaRecovered = (deltaRecovered) => {\r\n        if (deltaRecovered != 0) {\r\n            return <span className=\"glyphicon glyphicon-arrow-up delta-recovered\">{deltaRecovered}</span>;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getDeltaDeaths = (deltaDeaths) => {\r\n        if (deltaDeaths != 0) {\r\n            return <span className=\"glyphicon glyphicon-arrow-up delta-deaths\">{deltaDeaths}</span>;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getAffectedStateCount = () => {\r\n        let count = 0;\r\n        stateData.map((state) => {\r\n            if (state.confirmed != 0) {\r\n                count += 1;\r\n            }\r\n        });\r\n        return count;\r\n    }\r\n\r\n    const scrollToTop = () => {\r\n        window.scroll({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: 'smooth'\r\n        });\r\n    }\r\n\r\n    const onClickHandler = (e) => {\r\n        const hiddenEl = e.currentTarget.nextElementSibling.firstChild.firstElementChild.classList;\r\n        const plusMinusIcon = e.currentTarget.firstElementChild.firstChild.classList;\r\n        (hiddenEl.value.indexOf(\"collapse\") !== -1) ? hiddenEl.remove(\"collapse\") : hiddenEl.add(\"collapse\");\r\n        (plusMinusIcon.value.indexOf(\"chevron-right\") != -1) ? plusMinusIcon.replace(\"glyphicon-chevron-right\", \"glyphicon-chevron-down\") : plusMinusIcon.replace(\"glyphicon-chevron-down\", \"glyphicon-chevron-right\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                <ul>\r\n                    <li><a href=\"\">Home</a></li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"message\">\r\n                Stay Home. Stay Safe. #Covid19\r\n            </div>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12 heading\">Covid 19 - Cases in India</div>\r\n                    <div className=\"col-sm-12 last-updated\">Last Updated: {total.lastupdatedtime} IST</div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-3 col-6 heading-data confirmed\">\r\n                        <h4>Confirmed</h4>\r\n                        <p className=\"count\">{total.confirmed}</p>\r\n                        <p className=\"increment\">[+{total.deltaconfirmed}]</p>\r\n                    </div>\r\n                    <div className=\"col-sm-3 col-6 heading-data active\">\r\n                        <h4>Active Cases</h4>\r\n                        <p className=\"count\">{calculateActiveCases(total.confirmed, total.recovered, total.deaths)}</p>\r\n                    </div>\r\n                    <div className=\"col-sm-3 col-6 heading-data recovered\">\r\n                        <h4>Recovered</h4>\r\n                        <p className=\"count\">{total.recovered}</p>\r\n                        <p className=\"increment\">[+{total.deltarecovered}]</p>\r\n                    </div>\r\n                    <div className=\"col-sm-3 col-6 heading-data deaths\">\r\n                        <h4>Deaths</h4>\r\n                        <p className=\"count\">{total.deaths}</p>\r\n                        <p className=\"increment\">[+{total.deltadeaths}]</p>\r\n                    </div>\r\n                </div>\r\n                <Graph data={graphData} />\r\n                <h4 className=\"affected-states\">No. of States/UT affected: {getAffectedStateCount()}</h4>\r\n                <div id=\"no-more-tables\">\r\n                    <table className=\"table table-parent\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">State/UT</th>\r\n                                <th scope=\"col\">Confirmed</th>\r\n                                <th scope=\"col\">Active</th>\r\n                                <th scope=\"col\">Recovered</th>\r\n                                <th scope=\"col\">Deaths</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {stateData.map((state) => {\r\n                                return (\r\n                                    <React.Fragment>\r\n                                        <tr key={state.state} onClick={onClickHandler}>\r\n                                            <td><span className=\"glyphicon glyphicon-chevron-right plus-minus\"></span> {state.state}</td>\r\n                                            <td>{getDeltaConfirmed(state.deltaconfirmed)} {state.confirmed}</td>\r\n                                            <td>{state.active}</td>\r\n                                            <td>{getDeltaRecovered(state.deltarecovered)} {state.recovered}</td>\r\n                                            <td>{getDeltaDeaths(state.deltadeaths)} {state.deaths}</td>\r\n                                        </tr>\r\n                                        <tr key={state.statecode}>\r\n                                            <td colSpan=\"5\" className=\"hiddenRow\">\r\n                                                <div className=\"collapse\">\r\n                                                    <h5 className=\"dist-heading\">Last Updated: {state.lastupdatedtime} IST</h5>\r\n                                                    <div>{state.statenotes}</div>\r\n                                                    <table className=\"table-child\">\r\n                                                        <thead>\r\n                                                            <tr>\r\n                                                                <th>District</th>\r\n                                                                <th>Confirmed</th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            {\r\n                                                                stateDistArr.map((g) => {\r\n                                                                    if (g[0] === state.state) {\r\n                                                                        return (\r\n                                                                            Object.entries(g[1].districtData).map((l) => {\r\n                                                                                return (\r\n                                                                                    <tr key={l[0]}>\r\n                                                                                        <td>{l[0]}</td>\r\n                                                                                        <td>{getDistDeltaConfirmed(l[1].delta.confirmed)} {l[1].confirmed}</td>\r\n                                                                                    </tr>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        )\r\n                                                                    }\r\n                                                                })\r\n                                                            }\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </React.Fragment>\r\n                                )\r\n                            })}\r\n                            <tr>\r\n                                <th scope=\"col\">Total</th>\r\n                                <th scope=\"col\">{getDeltaConfirmed(total.deltaconfirmed)} {total.confirmed}</th>\r\n                                <th scope=\"col\">{total.active}</th>\r\n                                <th scope=\"col\">{getDeltaRecovered(total.deltarecovered)} {total.recovered}</th>\r\n                                <th scope=\"col\">{getDeltaDeaths(total.deltadeaths)} {total.deaths}</th>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div>\r\n                        <button className=\"btn btn-primary float-right go-to-top\" onClick={scrollToTop}>TOP</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <footer className=\"footer\">\r\n                This is not an official website and data is taken from <a href=\"https://api.covid19india.org/\" target=\"_blank\">COVID19INDIA</a> API. <br />\r\n                Designed by: <a href=\"https://www.linkedin.com/in/deepak-maddheshiya/\" target=\"_blank\">Deepak Maddheshiya</a>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from './Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}