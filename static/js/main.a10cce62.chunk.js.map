{"version":3,"sources":["Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","useState","dataReceived","setDataReceived","total","setTotal","stateData","setStateData","stateDistData","setStateDistData","stateDistArr","setStateDistArr","useEffect","a","Promise","all","axios","get","response","stateDistResponse","data","statewise","slice","Object","entries","getStates","confirmed","recovered","deaths","getDeltaConfirmed","deltaconfirmed","className","getDeltaRecovered","deltaRecovered","getDeltaDeaths","deltaDeaths","onClickHandler","e","hiddenEl","currentTarget","nextElementSibling","firstChild","firstElementChild","classList","value","indexOf","remove","add","href","lastupdatedtime","deltarecovered","deltadeaths","count","map","state","getAffectedStateCount","id","scope","Fragment","key","onClick","active","statecode","colSpan","g","districtData","l","delta","window","scroll","top","left","behavior","target","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a10cce62.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Home.css';\r\nimport axios from 'axios';\r\n\r\nconst Home = (props) => {\r\n    const [dataReceived, setDataReceived] = useState(false);\r\n    const [total, setTotal] = useState({});\r\n    const [stateData, setStateData] = useState([]);\r\n    const [stateDistData, setStateDistData] = useState([]);\r\n    const [stateDistArr, setStateDistArr] = useState([]);\r\n    useEffect(() => {\r\n        const getStates = async () => {\r\n            const [response, stateDistResponse] = await Promise.all([\r\n                axios.get('https://api.covid19india.org/data.json'),\r\n                axios.get('https://api.covid19india.org/state_district_wise.json')]);\r\n            setTotal(response.data.statewise[0]);\r\n            setStateData(response.data.statewise.slice(1));\r\n            // setStateData(stateData.sort((a, b) => {\r\n            //     return (b.confirmed - a.confirmed);\r\n            // }));\r\n            setStateDistData(stateDistResponse.data);\r\n            setDataReceived(true);\r\n            setStateDistArr(Object.entries(stateDistData));\r\n        }\r\n        if (!dataReceived) {\r\n            getStates();\r\n        }\r\n    });\r\n\r\n    const calculateActiveCases = (confirmed, recovered, deaths) => {\r\n        return confirmed - recovered - deaths;\r\n    }\r\n\r\n    const getDeltaConfirmed = (deltaconfirmed) => {\r\n        if (deltaconfirmed != 0) {\r\n            return <span className=\"glyphicon glyphicon-arrow-up delta-confirmed\">{deltaconfirmed}</span>;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getDistDeltaConfirmed = (deltaconfirmed) => {\r\n        if (deltaconfirmed != 0) {\r\n            return <span className=\"glyphicon glyphicon-arrow-up delta-confirmed\">{deltaconfirmed}</span>;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getDeltaRecovered = (deltaRecovered) => {\r\n        if (deltaRecovered != 0) {\r\n            return <span className=\"glyphicon glyphicon-arrow-up delta-recovered\">{deltaRecovered}</span>;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getDeltaDeaths = (deltaDeaths) => {\r\n        if (deltaDeaths != 0) {\r\n            return <span className=\"glyphicon glyphicon-arrow-up delta-deaths\">{deltaDeaths}</span>;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getAffectedStateCount = () => {\r\n        let count = 0;\r\n        stateData.map((state) => {\r\n            if (state.confirmed != 0) {\r\n                count += 1;\r\n            }\r\n        });\r\n        return count;\r\n    }\r\n\r\n    const scrollToTop = () => {\r\n        window.scroll({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: 'smooth'\r\n        });\r\n    }\r\n\r\n    const onClickHandler = (e) => {\r\n        const hiddenEl = e.currentTarget.nextElementSibling.firstChild.firstElementChild.classList;\r\n        (hiddenEl.value.indexOf(\"collapse\") !== -1) ? hiddenEl.remove(\"collapse\") : hiddenEl.add(\"collapse\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                <ul>\r\n                    <li><a href=\"\">Home</a></li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"message\">\r\n                Stay Home. Stay Safe. #Covid19\r\n            </div>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12 heading\">Covid 19 - Cases in India</div>\r\n                    <div className=\"col-sm-12 last-updated\">Last Updated: {total.lastupdatedtime} IST</div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-3 col-6 heading-data confirmed\">\r\n                        <h4>Confirmed</h4>\r\n                        <p className=\"count\">{total.confirmed}</p>\r\n                        <p className=\"increment\">[+{total.deltaconfirmed}]</p>\r\n                    </div>\r\n                    <div className=\"col-sm-3 col-6 heading-data active\">\r\n                        <h4>Active Cases</h4>\r\n                        <p className=\"count\">{calculateActiveCases(total.confirmed, total.recovered, total.deaths)}</p>\r\n                    </div>\r\n                    <div className=\"col-sm-3 col-6 heading-data recovered\">\r\n                        <h4>Recovered</h4>\r\n                        <p className=\"count\">{total.recovered}</p>\r\n                        <p className=\"increment\">[+{total.deltarecovered}]</p>\r\n                    </div>\r\n                    <div className=\"col-sm-3 col-6 heading-data deaths\">\r\n                        <h4>Deaths</h4>\r\n                        <p className=\"count\">{total.deaths}</p>\r\n                        <p className=\"increment\">[+{total.deltadeaths}]</p>\r\n                    </div>\r\n                </div>\r\n                <h4 className=\"affected-states\">No. of States/UT affected: {getAffectedStateCount()}</h4>\r\n                <h4><b><i>--- Click on a row to see more information related to a particular state ---</i></b></h4>\r\n                <div id=\"no-more-tables\">\r\n                    <table className=\"table table-parent\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">State/UT</th>\r\n                                <th scope=\"col\">Confirmed</th>\r\n                                <th scope=\"col\">Active</th>\r\n                                <th scope=\"col\">Recovered</th>\r\n                                <th scope=\"col\">Deaths</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {stateData.map((state) => {\r\n                                return (\r\n                                    <React.Fragment>\r\n                                        <tr key={state.state} onClick={onClickHandler}>\r\n                                            <td>{state.state}</td>\r\n                                            <td>{getDeltaConfirmed(state.deltaconfirmed)} {state.confirmed}</td>\r\n                                            <td>{state.active}</td>\r\n                                            <td>{getDeltaRecovered(state.deltarecovered)} {state.recovered}</td>\r\n                                            <td>{getDeltaDeaths(state.deltadeaths)} {state.deaths}</td>\r\n                                        </tr>\r\n                                        <tr key={state.statecode}>\r\n                                            <td colSpan=\"5\" className=\"hiddenRow\">\r\n                                                <div className=\"collapse\" id=\"demo1\">\r\n                                                    <h5 className=\"dist-heading\">Last updated at: {state.lastupdatedtime}</h5>\r\n                                                    <table className=\"table-child\">\r\n                                                        <thead>\r\n                                                            <tr>\r\n                                                                <th>District</th>\r\n                                                                <th>Confirmed</th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            {\r\n                                                                stateDistArr.map((g) => {\r\n                                                                    if (g[0] === state.state) {\r\n                                                                        return (\r\n                                                                            Object.entries(g[1].districtData).map((l) => {\r\n                                                                                return (\r\n                                                                                    <tr key={l[0]}>\r\n                                                                                        <td>{l[0]}</td>\r\n                                                                                        <td>{getDistDeltaConfirmed(l[1].delta.confirmed)} {l[1].confirmed}</td>\r\n                                                                                    </tr>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        )\r\n                                                                    }\r\n                                                                })\r\n                                                            }\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </React.Fragment>\r\n                                )\r\n                            })}\r\n                            <tr>\r\n                                <th scope=\"col\">Total</th>\r\n                                <th scope=\"col\">{getDeltaConfirmed(total.deltaconfirmed)} {total.confirmed}</th>\r\n                                <th scope=\"col\">{total.active}</th>\r\n                                <th scope=\"col\">{getDeltaRecovered(total.deltarecovered)} {total.recovered}</th>\r\n                                <th scope=\"col\">{getDeltaDeaths(total.deltadeaths)} {total.deaths}</th>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div>\r\n                        <button className=\"btn btn-primary float-right go-to-top\" onClick={scrollToTop}>TOP</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <footer className=\"footer\">\r\n                Thanks to <a href=\"https://api.covid19india.org/\" target=\"_blank\">COVID19INDIA</a> for providing the API. <br />\r\n                Designed by: <a href=\"https://www.linkedin.com/in/deepak-maddheshiya/\" target=\"_blank\">Deepak Maddheshiya</a>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from './Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}